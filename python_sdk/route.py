import numpy as np
from SC import calc_spline_course

MATCH = {1: "x", 2: "x", 3: "y", 4: "y", 5: "y", 6: "y", 7: "x", 8: "x", 9: "y", 10: "y", 11: "y", 12: "y"}
SIDE = {
    1: "l",
    2: "r",
    3: "l",
    4: "l",
    5: "r",
    6: "r",
    7: "r",
    8: "l",
    9: "r",
    10: "l",
    11: "l",
    12: "l",
}


def get_region(x, y):
    if y > 2.2:
        if x < 1.9:
            return 1
        elif x > 3.4:
            return 5
        else:
            return 3
    else:
        if x < 1.9:
            return 2
        elif x > 3.4:
            return 6
        else:
            return 4


def get_id(x, y):
    r = get_region(x, y)
    if r == 1:
        if y > 3.05:
            return 1
        else:
            return 2
    elif r == 2:
        if x < 1.0:
            return 3
        else:
            return 4
    elif r == 3:
        if x < 2.7:
            return 5
        else:
            return 6
    elif r == 4:
        if y > 1.55:
            return 7
        else:
            return 8
    elif r == 5:
        if x < 4.1:
            return 9
        else:
            return 10
    elif r == 6:
        if x < 4.1:
            return 11
        else:
            return 12
    else:
        raise ValueError("Invalid region")


enter_routes = {
    1: (
        [1.35, 1.6847999999999999, 2.0976, 2.0928, 2.088, 1.3967999999999998, 0.5952],
        [
            0.25,
            1.6221419975932612,
            2.7196149217809866,
            3.2298435619735257,
            3.3501805054151625,
            3.6293622141997592,
            3.6871239470517447,
        ],
    ),
    2: (
        [1.35, 1.8095999999999999, 1.7904, 0.768],
        [0.25, 1.6077015643802648, 1.9590854392298436, 2.3971119133574006],
    ),
    3: (
        [
            1.35,
            1.3679999999999999,
            1.68,
            1.7664,
            1.7615999999999998,
            1.3679999999999999,
            0.72,
            0.504,
            0.40800000000000003,
        ],
        [
            0.25,
            0.28399518652226236,
            1.049338146811071,
            1.4873646209386282,
            1.9927797833935017,
            2.3826714801444044,
            2.377858002406739,
            2.1419975932611313,
            1.2226233453670277,
        ],
    ),
    4: ([1.35, 1.3679999999999999, 1.5888, 1.584], [0.25, 0.28399518652226236, 1.1167268351383874, 1.9975932611311673]),
    5: (
        [1.35, 1.3679999999999999, 1.7808, 1.9008, 2.0111999999999997, 2.1024, 2.0976],
        [
            0.25,
            0.28399518652226236,
            1.9253910950661852,
            2.2286401925391095,
            2.4500601684717207,
            3.2250300842358604,
            3.5186522262334536,
        ],
    ),
    6: (
        [1.35, 1.3679999999999999, 1.7808, 1.9008, 2.04, 2.0256, 2.3568, 3.1008, 3.2976],
        [
            0.25,
            0.28399518652226236,
            1.9253910950661852,
            2.2286401925391095,
            3.167268351383875,
            3.3309265944645006,
            3.7,
            3.6871239470517447,
            2.7196149217809866,
        ],
    ),
    7: (
        [1.35, 1.3679999999999999, 1.6751999999999998, 1.728, 2.0976, 3.0096],
        [0.25, 0.28399518652226236, 1.6654632972322503, 2.002406738868833, 2.204572803850782, 2.1949458483754514],
    ),
    8: (
        [1.35, 1.3679999999999999, 1.6895999999999998, 2.0928, 3.0048],
        [0.25, 0.28399518652226236, 0.7749699157641395, 0.8953068592057761, 0.914560770156438],
    ),
    9: (
        [1.35, 1.3679999999999999, 2.9903999999999997, 3.3023999999999996, 3.4943999999999997, 3.504, 3.504],
        [
            0.25,
            0.28399518652226236,
            0.789410348977136,
            1.0878459687123947,
            1.9157641395908545,
            2.6233453670276776,
            3.5042117930204575,
        ],
    ),
    10: (
        [
            1.35,
            1.3679999999999999,
            2.9903999999999997,
            3.3023999999999996,
            3.4943999999999997,
            3.84,
            4.2383999999999995,
            4.608 + 0.05,
            4.6608 + 0.05,
            4.656 + 0.05,
        ],
        [
            0.25,
            0.28399518652226236,
            0.789410348977136,
            1.0878459687123947,
            1.9157641395908545,
            2.2623345367027676,
            2.324909747292419,
            2.729241877256318,
            3.046931407942238,
            3.42719614921781,
        ],
    ),
    11: (
        [1.35, 1.3679999999999999, 1.6944, 1.704, 2.1552, 2.4624, 3.2064, 3.4848, 3.504, 3.4991999999999996],
        [
            0.25,
            0.28399518652226236,
            1.5210589651022863,
            1.9109506618531888,
            2.3152827918170877,
            2.3104693140794224,
            2.305655836341757,
            1.9253910950661852,
            1.6173285198555956,
            0.6064981949458483,
        ],
    ),
    12: (
        [
            1.35,
            1.3679999999999999,
            1.5648,
            2.7455999999999996,
            3.9503999999999997,
            4.3056,
            4.6464 + 0.075,
            4.6608 + 0.075,
            4.656 + 0.075,
        ],
        [
            0.25,
            0.28399518652226236,
            0.6113116726835138,
            0.5102286401925391,
            0.21179302045728038,
            0.21660649819494585,
            0.6738868832731648,
            0.9097472924187726,
            1.9157641395908545,
        ],
    ),
}

leave_routes = {
    1: (
        [0.5952, 0.384, 0.2976, 0.288, 0.5184, 0.8976, 1.3776],
        [
            3.6871239470517447,
            3.220216606498195,
            1.8243080625752106,
            1.3188929001203369,
            1.0974729241877257,
            0.9290012033694344,
            0.0914560770156438,
        ],
    ),
    2: (
        [0.768, 0.41279999999999994, 0.36479999999999996, 0.9935999999999999, 1.4256],
        [2.3971119133574006, 2.2912154031287604, 1.1552346570397112, 0.851985559566787, 0.10589651022864019],
    ),
    3: (
        [0.40800000000000003, 0.6815999999999999, 0.9791999999999998, 1.392],
        [1.2226233453670277, 0.9578820697954272, 0.9049338146811071, 0.11552346570397112],
    ),
    4: (
        [1.584, 1.3008, 0.9359999999999999, 0.3936, 0.2736, 0.336, 0.5568, 0.9887999999999999, 1.3488],
        [
            1.9975932611311673,
            2.296028880866426,
            2.392298435619735,
            2.170878459687124,
            1.829121540312876,
            1.2418772563176896,
            0.9675090252707581,
            0.9097472924187726,
            0.0914560770156438,
        ],
    ),
    5: (
        [
            2.0976,
            2.3904,
            2.6064000000000003,
            3.096,
            3.4031999999999996,
            3.408,
            3.3983999999999996,
            2.8655999999999997,
            1.3248,
        ],
        [
            3.5186522262334536,
            3.7015643802647413,
            3.7063778580024067,
            3.711191335740072,
            3.2298435619735257,
            2.8832731648616123,
            1.2851985559566788,
            0.6979542719614922,
            0.259927797833935,
        ],
    ),
    6: ([3.2976, 3.4271999999999996, 1.3488], [2.7196149217809866, 1.1696750902527075, 0.24548736462093862]),
    7: (
        [3.0096, 3.3503999999999996, 3.2448, 1.3583999999999998],
        [2.1949458483754514, 1.8580024067388687, 0.7990373044524669, 0.259927797833935],
    ),
    8: (
        [3.0048, 3.1776, 2.9183999999999997, 1.3488],
        [0.914560770156438, 0.6787003610108303 + 0.1, 0.4380264741275572 + 0.1, 0.21660649819494585 + 0.1],
    ),
    9: (
        [3.504, 3.1824, 2.6352, 2.0688, 1.9152, 1.7328, 1.704, 1.3248],
        [
            3.5042117930204575,
            3.7256317689530687,
            3.802647412755716,
            3.422382671480144,
            2.5174488567990374,
            1.838748495788207,
            1.1070998796630565,
            0.2214199759326113,
        ],
    ),
    10: (
        [4.656 + 0.05, 4.3728, 3.6288, 3.432, 3.3935999999999997, 3.2832000000000003, 1.3488],
        [
            3.42719614921781,
            3.677496991576414,
            3.6101083032490973,
            3.157641395908544,
            1.9253910950661852,
            0.9097472924187726,
            0.24548736462093862,
        ],
    ),
    11: ([3.4991999999999996, 2.4192, 1.3008], [0.6064981949458483, 0.3850782190132371, 0.24548736462093862]),
    12: (
        [
            4.656 + 0.075,
            4.512,
            3.9647999999999994,
            2.1168,
            1.7711999999999999,
            1.6751999999999998 + 0.1,
            1.6847999999999999 + 0.1,
            1.3296000000000001,
        ],
        [
            1.9157641395908545,
            2.2815884476534296,
            2.401925391095066,
            2.392298435619735,
            2.2623345367027676,
            1.8772563176895307,
            1.1263537906137184,
            0.2695547533092659,
        ],
    ),
}


def get_route(x, y, dl=0.1):
    id = get_id(x, y)
    print(f"ID: {id}")
    enter = enter_routes[id]
    leave = leave_routes[id]
    enter_params = [[], [], [], []]
    leave_params = [[], [], [], []]
    cx, cy, cyaw, ck, _ = calc_spline_course(enter[0], enter[1], ds=dl)
    split_idx = len(cx) - 1
    m = MATCH[id]
    if m == "x":
        first_state = x < cx[split_idx]
        while (first_state) == (x < cx[split_idx]):
            split_idx -= 1
    else:
        first_state = y < cy[split_idx]
        while (first_state) == (y < cy[split_idx]):
            split_idx -= 1
    enter_params[0].extend(cx[:split_idx])
    enter_params[1].extend(cy[:split_idx])
    enter_params[2].extend(cyaw[:split_idx])
    enter_params[3].extend(ck[:split_idx])
    leave_params[0].extend(cx[split_idx:])
    leave_params[1].extend(cy[split_idx:])
    leave_params[2].extend(cyaw[split_idx:])
    leave_params[3].extend(ck[split_idx:])
    cx, cy, cyaw, ck, _ = calc_spline_course(leave[0], leave[1], ds=dl)
    leave_params[0].extend(cx)
    leave_params[1].extend(cy)
    leave_params[2].extend(cyaw)
    leave_params[3].extend(ck)
    return enter_params, leave_params, SIDE[id]
